// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "TsSvcId-odb.h"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // TsSvcId
  //

  bool access::composite_value_traits< ::TsSvcId, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // tsId
    //
    t[0UL] = 0;

    // serviceId
    //
    t[1UL] = 0;

    return grew;
  }

  void access::composite_value_traits< ::TsSvcId, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // tsId
    //
    b[n].buffer_type = MYSQL_TYPE_SHORT;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.tsId_value;
    b[n].is_null = &i.tsId_null;
    n++;

    // serviceId
    //
    b[n].buffer_type = MYSQL_TYPE_SHORT;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.serviceId_value;
    b[n].is_null = &i.serviceId_null;
    n++;
  }

  bool access::composite_value_traits< ::TsSvcId, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // tsId
    //
    {
      // From TsSvcId.h:48:31
      ::TsId const& v =
        o.GetTsId ();

      bool is_null (false);
      mysql::value_traits<
          ::TsId,
          mysql::id_ushort >::set_image (
        i.tsId_value, is_null, v);
      i.tsId_null = is_null;
    }

    // serviceId
    //
    {
      // From TsSvcId.h:50:32
      ::ServiceId const& v =
        o.GetServiceId ();

      bool is_null (false);
      mysql::value_traits<
          ::ServiceId,
          mysql::id_ushort >::set_image (
        i.serviceId_value, is_null, v);
      i.serviceId_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::TsSvcId, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // tsId
    //
    {
      // From TsSvcId.h:48:44
      ::TsId v;

      mysql::value_traits<
          ::TsId,
          mysql::id_ushort >::set_value (
        v,
        i.tsId_value,
        i.tsId_null);

      // From TsSvcId.h:48:44
      o.SetTsId (v);
    }

    // serviceId
    //
    {
      // From TsSvcId.h:50:50
      ::ServiceId v;

      mysql::value_traits<
          ::ServiceId,
          mysql::id_ushort >::set_value (
        v,
        i.serviceId_value,
        i.serviceId_null);

      // From TsSvcId.h:50:50
      o.SetServiceId (v);
    }
  }
}

#include <odb/post.hxx>
