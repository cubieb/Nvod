// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef TS_SVC_ID_ODB_H
#define TS_SVC_ID_ODB_H

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "TsSvcId.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // TsSvcId
  //
  template <>
  class access::composite_value_traits< ::TsSvcId, id_mysql >
  {
    public:
    typedef ::TsSvcId value_type;

    struct image_type
    {
      // tsId
      //
      unsigned short tsId_value;
      my_bool tsId_null;

      // serviceId
      //
      unsigned short serviceId_value;
      my_bool serviceId_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);

    static const std::size_t column_count = 2UL;
  };
}

#include "TsSvcId-odb.ixx"

#include <odb/post.hxx>

#endif // TS_SVC_ID_ODB_H
